// <auto-generated />
using System;
using Maze.Database.Connections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Maze.Database.Migrations
{
    [DbContext(typeof(MazeContext))]
    [Migration("20240804134612_Maze")]
    partial class Maze
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DayShow", b =>
                {
                    b.Property<int>("DaysID")
                        .HasColumnType("int");

                    b.Property<int>("ShowsID")
                        .HasColumnType("int");

                    b.HasKey("DaysID", "ShowsID");

                    b.HasIndex("ShowsID");

                    b.ToTable("DayShow");
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("int");

                    b.Property<int>("ShowsID")
                        .HasColumnType("int");

                    b.HasKey("GenresID", "ShowsID");

                    b.HasIndex("ShowsID");

                    b.ToTable("GenreShow");
                });

            modelBuilder.Entity("Maze.Models.Database.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Maze.Models.Database.Day", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Maze.Models.Database.External", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Imdb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Thetvdb")
                        .HasColumnType("int");

                    b.Property<int?>("Tvrage")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("Maze.Models.Database.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Maze.Models.Database.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Maze.Models.Database.Network", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Maze.Models.Database.Show", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageRuntime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalID")
                        .HasColumnType("int");

                    b.Property<string>("ImageMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("LinkPreviousEpisode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkPreviousEpisodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkSelf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetworkID")
                        .HasColumnType("int");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Premiered")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RatingAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Runtime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ScheduleTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Updated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ExternalID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("NetworkID");

                    b.HasIndex("StatusID");

                    b.HasIndex("TypeID");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Maze.Models.Database.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Maze.Models.Database.Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("DayShow", b =>
                {
                    b.HasOne("Maze.Models.Database.Day", null)
                        .WithMany()
                        .HasForeignKey("DaysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maze.Models.Database.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.HasOne("Maze.Models.Database.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maze.Models.Database.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Maze.Models.Database.Network", b =>
                {
                    b.HasOne("Maze.Models.Database.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Maze.Models.Database.Show", b =>
                {
                    b.HasOne("Maze.Models.Database.External", "External")
                        .WithMany()
                        .HasForeignKey("ExternalID");

                    b.HasOne("Maze.Models.Database.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID");

                    b.HasOne("Maze.Models.Database.Network", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkID");

                    b.HasOne("Maze.Models.Database.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.HasOne("Maze.Models.Database.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.Navigation("External");

                    b.Navigation("Language");

                    b.Navigation("Network");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
